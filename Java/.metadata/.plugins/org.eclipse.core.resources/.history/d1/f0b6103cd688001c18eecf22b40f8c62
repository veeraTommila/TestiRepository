
public class BinaryStringTree {
	private String tieto;
    private BinaryStringTree left;
    private BinaryStringTree right;
 
    public BinaryStringTree() {
        this.tieto = null;
        this.left = null;
        this.right = null;
    }
     
    public BinaryStringTree(String tieto) {
        this.tieto = tieto;
        this.left = null;
        this.right = null;
    }
 
    public static BinaryStringTree createTree( String content ) {
        BinaryStringTree binaaripuu = new BinaryStringTree();
        if( content != null ) {
            //
            // Remove the punctuation from the content
            //
            content = content.replaceAll("(\\w+)\\p{Punct}(\\s|$)", "$1$2");
            String[] words = content.split( " " );
            binaaripuu = new BinaryStringTree();
            for( int i = 0; i < words.length; i++ ) {
                binaaripuu.addNode( words[i]);
            }
        }
        return binaaripuu;
    }
 
     
    // As a convention, if the key to be inserted is less than the key of root
    // node, then key is inserted in
    // left sub-tree; If key is greater, it is inserted in right sub-tree. If it
    // is equal, as a convention, it
    // is inserted in right sub-tree
    public void addNode(String tieto) {
        if (this.tieto == null) {
            this.tieto = tieto;
        } else {
            if (this.tieto.compareTo(tieto) < 0) {
                if (this.left != null) {
                    this.left.addNode(tieto);
                } else {
                    this.left = new BinaryStringTree(tieto);
                }
 
            } else {
                if (this.right != null) {
                    this.right.addNode(tieto);
                } else {
                    this.right = new BinaryStringTree(tieto);
                }
 
            }
        }
    }
     
    //Juurisolmu, vasen lapsi, oikea lapsi. Virallinen järjestys puussa.
    public void esijarjesta() {        
        
        if (this.left != null) {
            this.left.esijarjesta();
            System.out.println("left");
        }
        System.out.println("Solmu: " + this.tieto);
        if (this.right != null) {
            this.right.esijarjesta();
            System.out.println("right");
        }
    }
 
    //Vasen lapsi, juurisolmu, oikea lapsi.
    public void sisajarjesta() {
        if (this.left != null) {
            this.left.sisajarjesta();
        }
        System.out.println("Solmu: " + this.tieto);
        if (this.right != null) {
            this.right.sisajarjesta();
        }
    }
 
    //Vasen lapsi, oikea lapsi, juurisolmu.
    public void jalkijarjesta() {
        if (this.left != null) {
            this.left.jalkijarjesta();
        }
        if (this.right != null) {
            this.right.jalkijarjesta();
        }
        System.out.println("Solmu: " + this.tieto);
    }
    
    public void printOrder() {
    	if (this.left != null) {
            this.left.printOrder();
        }
        if (this.right != null) {
            this.right.printOrder();
        }
        System.out.println("Solmu: " + this.tieto);
    }
    

	public static void main(String[] args) {
        BinaryStringTree binaaripuu1 = new BinaryStringTree();
        BinaryStringTree binaaripuu2 = new BinaryStringTree();
        BinaryStringTree binaaripuu3 = new BinaryStringTree();
              
        binaaripuu1.addNode("F");
        binaaripuu1.addNode("C");
        binaaripuu1.addNode("G");
        binaaripuu1.addNode("A");
        binaaripuu1.addNode("I");
        binaaripuu1.addNode("D");
        binaaripuu1.addNode("E");
        binaaripuu1.addNode("J");
        binaaripuu1.addNode("H");
        binaaripuu1.addNode("B");
       
        binaaripuu1.esijarjesta();
        
        
        System.out.println(" ");
        /*
        binaaripuu2.addNode("F");
        binaaripuu2.addNode("I");
        binaaripuu2.addNode("G");
        binaaripuu2.addNode("H");
        binaaripuu2.addNode("B");
        binaaripuu2.addNode("A");
        binaaripuu2.addNode("D");
        binaaripuu2.addNode("C");
        binaaripuu2.addNode("J");
        binaaripuu2.addNode("E");
        
        System.out.println("PrintOrder binaaripuu2: ");
        binaaripuu2.printOrder();
        System.out.println(" ");
        System.out.println("Sisäjärjestetty binaaripuu2: ");
        binaaripuu2.sisajarjesta();
        System.out.println(" ");
        System.out.println("Jälkijärjestetty binaaripuu2: ");
        binaaripuu2.jalkijarjesta();
        System.out.println(" ");
        System.out.println("Esijärjestetty binaaripuu2: ");	//Tämä on virallinen järjestys!
        binaaripuu2.esijarjesta();
        
        
        System.out.println(" ");
        
        binaaripuu3.addNode("F");
        binaaripuu3.addNode("E");
        binaaripuu3.addNode("I");
        binaaripuu3.addNode("C");
        binaaripuu3.addNode("B");
        binaaripuu3.addNode("G");
        binaaripuu3.addNode("A");
        binaaripuu3.addNode("H");
        binaaripuu3.addNode("D");
        binaaripuu3.addNode("J");
        
        System.out.println("PrintOrder binaaripuu3: ");
        binaaripuu3.printOrder();
        System.out.println(" ");
        System.out.println("Sisäjärjestetty binaaripuu3: ");
        binaaripuu3.sisajarjesta();
        System.out.println(" ");
        System.out.println("Jälkijärjestetty binaaripuu3: ");
        binaaripuu3.jalkijarjesta();
        System.out.println(" ");
        System.out.println("Esijärjestetty binaaripuu3: ");	//Tämä on virallinen järjestys!
        binaaripuu3.esijarjesta();
        
        */
       

	}

}
