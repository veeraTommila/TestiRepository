
class Node {
	int key;
    Node left, right;
 
    public Node(int item)
    {
        key = item;
        left = right = null;
    }

}

class Binaaripuu{
	Node root;
	 
	Binaaripuu() { root = null; }
 
    /* Given a binary tree, print its Solmus according to the
      "bottom-up" postorder traversal. */
    void printPostorder(Node Solmu)
    {
        if (Solmu == null)
            return;
 
        // first recur on left subtree
        printPostorder(Solmu.left);
 
        // then recur on right subtree
        printPostorder(Solmu.right);
 
        // now deal with the Solmu
        System.out.print(Solmu.key + " ");
    }
 
    /* Given a binary tree, print its Solmus in inorder*/
    void printInorder(Node Solmu)
    {
        if (Solmu == null)
            return;
 
        /* first recur on left child */
        printInorder(Solmu.left);
 
        /* then print the data of Solmu */
        System.out.print(Solmu.key + " ");
 
        /* now recur on right child */
        printInorder(Solmu.right);
    }
 
    /* Given a binary tree, print its Solmus in preorder*/
    void printPreorder(Node Solmu)
    {
        if (Solmu == null)
            return;
 
        /* first print data of Solmu */
        System.out.print(Solmu.key + " ");
 
        /* then recur on left subtree */
        printPreorder(Solmu.left);
 
        /* now recur on right subtree */
        printPreorder(Solmu.right);
    }
 
    // Wrappers over above recursive functions
    void printPostorder() { printPostorder(root); }
    void printInorder() { printInorder(root); }
    void printPreorder() { printPreorder(root); }
	public static void main(String[] args) {

		Binaaripuu tree = new Binaaripuu();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);
 
        System.out.println(
            "Preorder traversal of binary tree is ");
        tree.printPreorder();
 
        System.out.println(
            "\nInorder traversal of binary tree is ");
        tree.printInorder();
 
        System.out.println(
            "\nPostorder traversal of binary tree is ");
        tree.printPostorder();

	}

}