
//package binarytree;

class Solmu {
  Solmu left;
  Solmu right;
  int data;
}

class BinaryTree {
 
//Vasen lapsi, juurisolmu, oikea lapsi.
  public void sisajarjesta(Solmu solmu) {
    if(solmu == null) {
      return;
    }
    
    sisajarjesta(solmu.left);
    System.out.print(solmu.data + " ");
    sisajarjesta(solmu.right);
  }
  
//Juurisolmu, vasen lapsi, oikea lapsi. Virallinen järjestys puussa.
  public void esijarjesta(Solmu solmu) {
    if(solmu == null) {
      return;
    }
    
    System.out.print(solmu.data + " ");
    esijarjesta(solmu.left);
    esijarjesta(solmu.right);
  }
  
//Vasen lapsi, oikea lapsi, juurisolmu.
  public void jalkijarjesta(Solmu solmu) {
    if(solmu == null) {
      return;
    }
    
    jalkijarjesta(solmu.left);
    jalkijarjesta(solmu.right);
    System.out.print(solmu.data + " ");
  }
  
  public Solmu luoSolmu(int arvo) {
    Solmu newNode = new Solmu();
    newNode.data = arvo;
    newNode.left = null;
    newNode.right = null;
    return newNode;
  }
}

public class BinaryTreeApp {

	public static void main(String[] args) {
		  BinaryTree puu = new BinaryTree();
		    
		    Solmu root = puu.luoSolmu(10);
		    root.left = puu.luoSolmu(5);
		    root.right = puu.luoSolmu(20);
		    root.left.left = puu.luoSolmu(3);
		    root.left.right = puu.luoSolmu(9);
		    root.left.left.right = puu.luoSolmu(4);
		    root.left.left.left = puu.luoSolmu(1);
		    root.right.right = puu.luoSolmu(25);
		    root.right.left = puu.luoSolmu(15);
		    root.right.left.right = puu.luoSolmu(17);
		    root.right.left.left = puu.luoSolmu(13);
		    root.right.right.right = puu.luoSolmu(30);
		    
		    System.out.print("Sisäjärjestys: ");
		    puu.sisajarjesta(root);
		    System.out.println();

		    System.out.print("Esijärjestys: ");
		    puu.esijarjesta(root);
		    System.out.println();
		    
		    System.out.print("Jälkijärjestys: ");
		    puu.jalkijarjesta(root);
		    System.out.println();
		    
		    BinaryTree a = new BinaryTree();
		    
		    Node root = a.createNewNode(2);
		    root.left = a.createNewNode(7);
		    root.right = a.createNewNode(5);
		    root.left.left = a.createNewNode(2);
		    root.left.right = a.createNewNode(6);
		    root.left.right.left = a.createNewNode(5);
		    root.left.right.right = a.createNewNode(11);
		    root.right.right = a.createNewNode(9);
		    root.right.right.left = a.createNewNode(4);
		    
		    System.out.print("Inorder: ");
		    a.inorder(root);
		    System.out.println();

		    System.out.print("PreOrder: ");
		    a.preorder(root);
		    System.out.println();
		    
		    System.out.print("PostOrder: ");
		    a.postorder(root);
		    System.out.println();

	}

}
